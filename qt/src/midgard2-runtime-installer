#!/usr/bin/env php
<?php

require 'pake/init.php';

if ($argc <= 1)
{
    throw new pakeException('Usage: midgard2-runtime-installer "/path/to/bundle.zip" ["override_name"]');
}

$installer = new Midgard2RuntimeInstaller($argv[1], isset($argv[2]) ? $argv[2] : null);
$installer->create_directories();
$installer->copy_components();
$installer->copy_tal();
$installer->copy_base_xml_files();
$installer->create_php_ini();
$installer->create_midgard_conf();
$installer->create_database_creator();
unset($installer);

class Midgard2RuntimeInstaller
{
    const PREFIX = '/usr';

    private $components = null;

    public function __construct($bundle_file, $override_name)
    {
        $this->components = array('midgardmvc_core', 'midgardmvc_helper_forms', 'midgardmvc_helper_xsspreventer', 'midgardmvc_admin');

        if (!file_exists($bundle_file))
        {
            throw new pakeException("Specified bundle does not exist");
        }

        $this->bundle_directory = sys_get_temp_dir().'/'.self::create_random_key(10);

        // 1. Extracting the bundle
        // pakeArchive::extractArchive($argv[1], $this->bundle_directory);
        pake_sh(escapeshellarg(pake_which('unzip')).' '.escapeshellarg($bundle_file).' -d '.escapeshellarg($this->bundle_directory));

        // Load manifest from zip (if there isn't one, this is not a bundle)
        $data = $this->load_manifest();

        $_name = $override_name ? $override_name : $data['name'];

        $this->target_directory = getenv('HOME').'/.midgard2/'.$_name;

        $this->target_ini_file         = $this->target_directory.'/php.ini';
        $this->configuration_file      = $this->target_directory.'/midgard.conf';
        $this->target_cache_directory  = $this->target_directory.'/cache';
        $this->target_share_directory  = $this->target_directory.'/share';
        $this->target_schema_directory = $this->target_share_directory.'/schema';
        $this->target_views_directory  = $this->target_share_directory.'/views';

        pake_echo_comment("Installing bundle in: ".$target_directory);
    }

    public function __destruct()
    {
        pake_remove_dir($this->bundle_directory);
    }

    public function create_directories()
    {
        pake_mkdirs($this->target_directory);
        pake_mkdirs($this->target_share_directory);
        pake_mkdirs($this->target_schema_directory);
        pake_mkdirs($this->target_views_directory);
        pake_mkdirs($this->target_cache_directory);
    }

    public function copy_base_xml_files()
    {
        $source_share_directory = self::PREFIX."/share/midgard2";

        // 7. Copy the incoming MGD xml pieces
        pake_echo_comment("Installing common midgard data");
        pake_copy($source_share_directory."/MidgardObjects.xml",     $this->target_share_directory."MidgardObjects.xml");
        pake_copy($source_share_directory."/midgard_auth_types.xml", $this->target_share_directory."midgard_auth_types.xml");
    }

    public function copy_components()
    {
        $_any = pakeFinder::type('any');

        foreach ($this->components as $c)
        {
            $source = $this->bundle_directory.'/'.$c;
            $target = $this->target_directory.'/'.$c;

            pake_echo_comment("Installing component: ".$c);

            pake_mkdirs($target);
            pake_mirror($_any, $source, $target);

            // 6. Copy the shemas from components
            $mgdschema_path = $source."/configuration/mgdschema.xml";

            if (file_exists($mgdschema_path))
            {
                pake_copy($mgdschema_path, $this->target_schema_directory."/{$c}.xml");
            }
        }
    }

    public function create_php_ini()
    {
        $error_log =          $this->target_directory."/runtime.log";

        $php_ini_contents = <<<INI
; Midgard2 configuration
midgard.http=On
midgard.engine=On
midgard.configuration_file={$this->configuration_file}
midgard.superglobals_compat=On

;PHP configuration
display_errors=stdout
log_errors=On
error_log={$error_log}
INI;

        pake_echo_comment("Bootstrapping internal php configuration");
        file_put_contents($this->target_ini_file, $php_ini_contents);
        pake_echo_action('file+', $target_ini_file);
    }

    public function create_midgard_conf()
    {
        $midgard_conf_contents = <<<INI
[MidgardDir]
ShareDir={$this->target_share_directory}
#VarDir=
#BlobDir=
CacheDir={$this->target_cache_directory}

[MidgardDatabase]
Type=SQLite
DatabaseDir={$this->target_directory}
Host=
Name=midgard
Username=midgard
Password=midgard

#DefaultLanguage=pl
Loglevel=debug
TableCreate=true
TableUpdate=true
INI;

        pake_echo_comment("Bootstrapping internal midgard configuration");
        file_put_contents($this->configuration_file, $midgard_conf_contents);
        pake_echo_action('file+', $this->configuration_file);
    }

    public function copy_tal()
    {
        pake_echo_comment("Installing PHPTAL (TODO: via extra dist in bundle)");
        $_any = pakeFinder::type('any');

        pake_mkdirs($this->target_directory.'/PHPTAL');
        pake_mirror(
            $_any,
            $this->bundle_directory.'/PHPTAL',
            $this->target_directory.'/PHPTAL'
        );
        pake_copy(
            $this->bundle_directory.'/PHPTAL.php',
            $this->target_directory.'/PHPTAL.php'
        );
    }

    public function create_database_creator()
    {
        pake_echo_comment("Bootstrapping database");

        $database_creator_contents = <<<PHP
<?php
/* Read configuration from target directory */
\$config = new midgard_config();
\$config->read_file_at_path("{$this->configuration_file}");

/* Open connection */
\$mgd = midgard_connection::get_instance();
if (!\$mgd->open_config(\$config))
{
    die("Couldn't open connection from given configuration! \n");
}

/* Create base storage */
midgard_storage::create_base_storage();

/* Create storage for every class which uses storage */
\$re = new ReflectionExtension("midgard2");
\$classes = \$re->getClasses();

foreach (\$classes as \$refclass)
{
    \$mrcs[] = new midgard_reflection_class(\$refclass->getName());
}

foreach (\$mrcs as \$refclass)
{
    \$parent_class = \$refclass->getParentClass();

    if (!\$parent_class)
    {
        continue;
    }

    if (\$parent_class->getName() == "midgard_dbobject"
        || \$parent_class->getName() == "midgard_object")
    {
        echo "Create storage for " . \$refclass->getName() . " class...";
        midgard_storage::create_class_storage(\$refclass->getName());
        echo "Done \n";
    }
}

/* Check if there's storage created for core node */
if (!midgard_storage::class_storage_exists ("midgardmvc_core_node"))
    throw new Exception("Storage for midgardmvc_core_node doesn't exist");

/* Create root node */
\$node = new midgardmvc_core_node();
\$node->set_guid("4a2f5298c09611de9dcf75343667cef6cef6");
\$node->up = 0;
\$node->content = "Welcome to Midgard MVC!";
\$node->name = "midgardmvc_root";

if (!\$node->create())
    throw new Exception("Failed to create MVC root node: " . \$mgd->get_error_string());

PHP;

        $target_file = $target_directory."/database_creator.php";
        file_put_contents($target_file, $database_creator_contents);
        pake_echo_action('file+', $target_file);

        // execute
        pake_sh('php -c '.escapeshellarg($this->target_ini_file).' '.escapeshellarg($target_file), true);
    }


    private function load_manifest()
    {
        $bundle_manifest = $this->bundle_directory.'/manifest.yml';

        if (!file_exists($bundle_manifest))
        {
            throw new pakeException("Not a valid bundle, the manifest.yml is missing [" . $bundle_manifest . "]");
        }

        $data = pakeYaml::loadFile($bundle_manifest);

        if (   !isset($data['type'])
            or $data['type'] != 'runtime bundle')
        {
            throw new pakeException('this is not a valid bundle');
        }

        return $data;
    }


    private static function create_random_key($amount)
    {
        $keyset  = "abcdefghijklmABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        $randkey = "";
        for ($i = 0; $i < $amount; $i++)
            $randkey .= substr($keyset, rand(0, strlen($keyset)-1), 1);

        return $randkey;
    }
}
