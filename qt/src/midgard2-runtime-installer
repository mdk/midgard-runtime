#!/usr/bin/env php5
<?php

define('PREFIX', '/usr');

// Check if we have param
if ($argc <= 1)
{
    die("Usage: midgard2-runtime-installer <BUNDLE PATH>\n");
}

// Check if exists...
if (!file_exists($argv[1]))
{
    die("Specified bundle does not exist.\n");
}


function create_random_key($amount)
{
    $keyset  = "abcdefghijklmABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    $randkey = "";
    for ($i = 0; $i < $amount; $i++)
        $randkey .= substr($keyset, rand(0, strlen($keyset)-1), 1);

    return $randkey;
}

require 'pake/init.php';

$bundle_directory =       sys_get_temp_dir().'/'.create_random_key(10).'/';
$base_directory =         getenv('HOME').'/.midgard2/';
$source_share_directory = PREFIX."/share/midgard2/";
$components =             array('midgardmvc_core', 'midgardmvc_helper_forms', 'midgardmvc_helper_xsspreventer', 'midgardmvc_admin');

// 1. Extracting the bundle
// pakeArchive::extractArchive($argv[1], $bundle_directory);
pake_sh(escapeshellarg(pake_which('unzip')).' '.escapeshellarg($argv[1]).' -d '.escapeshellarg($bundle_directory));

// 2. Verify a bit...
$bundle_manifest = $bundle_directory."manifest.yml";

if (!file_exists($bundle_manifest))
{
    throw new pakeException("Not a valid bundle, the manifest.yml is missing [" . $bundle_manifest . "]");
}

$data = pakeYaml::loadFile($bundle_manifest);

$bundle_name =             $data['name'];
$target_directory =        $base_directory . $bundle_name . "/";
$target_share_directory =  $target_directory . "share/";
$target_cache_directory =  $target_directory . "cache/";
$target_schema_directory = $target_share_directory . "schema/";
$target_views_directory =  $target_share_directory . "views/";

pake_echo_comment("Installing bundle in: ".$target_directory);

// 3. Create the directory
pake_mkdirs($target_directory);

// 4. Create the share
pake_mkdirs($target_share_directory);

// 5. Copy the bundled components...
$_any = pakeFinder::type('any');
foreach ($components as $c)
{
    $source = $bundle_directory . $c;
    $target = $target_directory . $c;

    pake_echo_comment("Installing component: ".$c);

    pake_mkdirs($target);
    pake_mirror($_any, $source, $target);
}

// 6. Copy the shemas from components
pake_mkdirs($target_schema_directory);

foreach ($components as $c)
{
    $mgdschema_path = $bundle_directory."{$c}/configuration/mgdschema.xml";
    $target_path =    $target_schema_directory."{$c}.xml";

    if (file_exists($mgdschema_path))
    {
        pake_copy($mgdschema_path, $target_path);
    }
}

// 7. Copy the incoming MGD xml pieces
pake_echo_comment("Installing common midgard data");
pake_copy($source_share_directory."MidgardObjects.xml",     $target_share_directory."MidgardObjects.xml");
pake_copy($source_share_directory."midgard_auth_types.xml", $target_share_directory."midgard_auth_types.xml");

// 8. Create the views
pake_mkdirs($target_views_directory);

// 9. Create the cache
pake_mkdirs($target_cache_directory);

// 10. Create the php.ini
$configuration_file = $target_directory."/midgard.conf";
$error_log =          $target_directory."/runtime.log";

$php_ini_contents = <<<EOF
; Midgard2 configuration
midgard.http=On
midgard.engine=On
midgard.configuration_file={$configuration_file}
midgard.superglobals_compat=On

;PHP configuration
display_errors=stdout
log_errors=On
error_log={$error_log}
EOF;

pake_echo_comment("Bootstrapping internal php configuration");
$target_ini_file = $target_directory."php.ini";
file_put_contents($target_ini_file, $php_ini_contents);
pake_echo_action('file+', $target_ini_file);

// 11. Create the midgard.conf
$midgard_conf_contents = <<<EOF
[MidgardDir]
ShareDir={$target_share_directory}
#VarDir=
#BlobDir=
CacheDir={$target_cache_directory}

[MidgardDatabase]
Type=SQLite
DatabaseDir={$target_directory}
Host=
Name=midgard
Username=midgard
Password=midgard

#DefaultLanguage=pl
Loglevel=debug
TableCreate=true
TableUpdate=true
EOF;

pake_echo_comment("Bootstrapping internal midgard configuration");
file_put_contents($configuration_file, $midgard_conf_contents);
pake_echo_action('file+', $configuration_file);

// 12. Copy TAL
pake_echo_comment("Installing PHPTAL (TODO: via extra dist in bundle)");
pake_mkdirs($target_directory.'PHPTAL');
pake_mirror($_any, $bundle_directory.'PHPTAL', $target_directory.'PHPTAL');
pake_copy($bundle_directory."PHPTAL.php", $target_directory."PHPTAL.php");

// 13. Prepare the database
pake_echo_comment("Bootstrapping database");

$target_configuration_file = $target_directory."midgard.conf";
$database_creator_contents = <<<EOF
<?php
/* Read configuration from target directory */
\$config = new midgard_config();
\$config->read_file_at_path("{$target_configuration_file}");

/* Open connection */
\$mgd = midgard_connection::get_instance();
if (!\$mgd->open_config(\$config))
{
    die("Couldn't open connection from given configuration! \n");
}

/* Create base storage */
midgard_storage::create_base_storage();

/* Create storage for every class which uses storage */
\$re = new ReflectionExtension("midgard2");
\$classes = \$re->getClasses();

foreach (\$classes as \$refclass)
{
    \$mrcs[] = new midgard_reflection_class(\$refclass->getName());
}

foreach (\$mrcs as \$refclass)
{
    \$parent_class = \$refclass->getParentClass();

    if (!\$parent_class)
    {
        continue;
    }

    if (\$parent_class->getName() == "midgard_dbobject"
        || \$parent_class->getName() == "midgard_object")
    {
        echo "Create storage for " . \$refclass->getName() . " class...";
        midgard_storage::create_class_storage(\$refclass->getName());
        echo "Done \n";
    }
}

/* Check if there's storage created for core node */
if (!midgard_storage::class_storage_exists ("midgardmvc_core_node"))
    throw new Exception("Storage for midgardmvc_core_node doesn't exist");

/* Create root node */
\$node = new midgardmvc_core_node();
\$node->set_guid("4a2f5298c09611de9dcf75343667cef6cef6");
\$node->up = 0;
\$node->content = "Welcome to Midgard MVC!";
\$node->name = "midgardmvc_root";

if (!\$node->create())
    throw new Exception("Failed to create MVC root node: " . \$mgd->get_error_string());

?>
EOF;

$target_file = $target_directory."database_creator.php";
file_put_contents($target_file, $database_creator_contents);
pake_echo_action('file+', $target_file);

pake_sh('php -c '.escapeshellarg($target_ini_file).' '.escapeshellarg($target_file), true);


//cleanup
pake_remove_dir($bundle_directory);
